# -*- coding: utf-8 -*-
"""Bio_info_algos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hJJXHsgFg-LOxOVR8Id1QsUFVvQ2qTs5
"""

import numpy as np

"""##Needlemann_Wunsch"""

def Needlemann_Wunsch(sequence1,sequence2,matching,mismatching,gapPenalty):

  col = len(sequence1)
  row = len(sequence2)

  matrix = np.zeros((row+1,col+1))
  intialize = 0
  for i in range(1,row+1):
    matrix[i][0] = intialize + gapPenalty
    intialize = matrix[i][0]

  intialize = 0

  for i in range(1,col+1):
    matrix[0][i] = intialize + gapPenalty
    intialize = matrix[0][i]

  for i in range(1,row+1):
    for j in range(1,col+1):
      left = matrix[i][j-1] + gapPenalty
      up   = matrix[i-1][j] + gapPenalty
      diagonal = matrix[i-1][j-1]

      if sequence2[i-1] == sequence1[j-1]:
        diagonal = diagonal + matching

      else:
        diagonal = diagonal + mismatching

      matrix[i][j] = max(max(left,up),diagonal)

  print("The matrix after filling after maximum scores is \n")
  print(matrix)

  i = row
  j = col

  seq1 = []
  seq2 = []
  result = []

  print("\nThe Global alignment is \n")
  while i>0 and j>0:

    #print("iteration")
    if sequence2[i-1] == sequence1[j-1]:
      result.append('\\')
      seq1.append(sequence1[j-1])
      seq2.append(sequence2[i-1])
      i-=1
      j-=1

    else:
      if matrix[i][j-1] > matrix[i-1][j] and matrix[i][j-1] > matrix[i-1][j-1]:
        result.append("<-")
        seq2.append("-")
        seq1.append(sequence1[j-1])
        j-=1

      elif matrix[i-1][j] > matrix[i][j-1] and matrix[i-1][j] > matrix[i-1][j-1]:
        result.append("^")
        seq1.append("-")
        seq2.append(sequence2[i-1])
        i-=1

      else:
        seq1.append(sequence1[j-1])
        seq2.append(sequence2[i-1])
        result.append("m")
        i-=1
        j-=1

  while(j>0):
    result.append("<-")
    seq2.append("-")
    seq1.append(sequence1[j-1])
    j-=1

  while(i>0):
    result.append("^")
    seq1.append("-")
    seq2.append(sequence2[i-1])
    i-=1

  print(seq1[::-1])
  print(seq2[::-1])
  print(result[::-1])
  print("\n")

Needlemann_Wunsch("ATGCT","AGCT",1,-1,-2)
Needlemann_Wunsch("ATAT","AT",1,-1,-2)
Needlemann_Wunsch("CGTGAATTCAT","GACTTAC",5,-3,-4)

"""##SmithWaterMan"""

def WanderSmith(sequence1,sequence2,matching,mismatching,gapPenalty):

  col = len(sequence1)
  row = len(sequence2)

  matrix = np.zeros((row+1,col+1))
  for i in range(1,col+1):
    if matrix[0][i]>0:
      matrix[0][i] = intialize + gapPenalty
    else:
      matrix[0][i]=0
    intialize = matrix[0][i]

  for i in range(1,row+1):
    for j in range(1,col+1):
      left = matrix[i][j-1] + gapPenalty
      if left < 0:
        left=0

      up   = matrix[i-1][j] + gapPenalty
      if up < 0:
        up=0

      diagonal = matrix[i-1][j-1]
      if diagonal < 0:
        diagonal =0

      if sequence2[i-1] == sequence1[j-1]:
        diagonal = diagonal + matching

      else:
        diagonal = diagonal + mismatching

      matrix[i][j] = max(max(left,up),diagonal)

  print("The matrix after filling after maximum scores is \n")
  print(matrix)

  maximum=0
  maxI=1
  maxJ=1
  for i in range(1,row+1):
    for j in range(1,col+1):
      if matrix[i][j]>maximum:
        maximum = matrix[i][j]
        maxI=i
        maxJ=j

  i = maxI
  j = maxJ

  seq1 = []
  seq2 = []
  result = []

  print("\nThe Local alignment is ")
  while(1):

    if matrix[i][j]==0:
      break

    if sequence2[i-1] == sequence1[j-1]:
      result.append('|')
      seq1.append(sequence1[j-1])
      seq2.append(sequence2[i-1])
      i-=1
      j-=1

    else:
      if matrix[i][j-1] > matrix[i-1][j] and matrix[i][j-1] > matrix[i-1][j-1]:
        result.append("<-")
        seq2.append("-")
        seq1.append(sequence1[j-1])
        j-=1

      elif matrix[i-1][j] > matrix[i][j-1] and matrix[i-1][j] > matrix[i-1][j-1]:
        result.append("^")
        seq1.append("-")
        seq2.append(sequence2[i-1])
        i-=1

      else:
        result.append("mismatch")
        seq1.append(sequence1[j-1])
        seq2.append(sequence2[i-1])
        i-=1
        j-=1


  print(seq1[::-1])
  print(result[::-1])
  print(seq2[::-1])

WanderSmith("ATGCT","AGCT",1,-1,-2)
WanderSmith("ATAT","AT",1,-1,-2)
WanderSmith("CGTGAATTCAT","GACTTAC",5,-3,-4)

"""##Gap Penalties"""

